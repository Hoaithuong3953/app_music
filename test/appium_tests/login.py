import unittest
import time
from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.webdriver.common.appiumby import AppiumBy
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# C·∫•u h√¨nh k·∫øt n·ªëi Appium
capabilities = dict(
    platformName='Android',
    automationName='uiautomator2',
    deviceName='emulator-5554',
    app='D:/University/Year3/KiemThuPhanMem2/project/app_music/build/app/outputs/flutter-apk/app-debug.apk',
    appPackage='com.example.app_music',
    appActivity='.MainActivity',
    language='en',
    locale='US',
    noReset=False,
    fullReset=False,
    fastReset=True
)

appium_server_url = 'http://127.0.0.1:4723/wd/hub'

class TestLoginFunction(unittest.TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        """Kh·ªüi ƒë·ªông Appium v√† m·ªü ·ª©ng d·ª•ng m·ªôt l·∫ßn cho t·∫•t c·∫£ c√°c test"""
        cls.driver = webdriver.Remote(appium_server_url, options=UiAutomator2Options().load_capabilities(capabilities))
        cls.wait = WebDriverWait(cls.driver, 20)  # TƒÉng th·ªùi gian ch·ªù l√™n 20 gi√¢y
        print("‚úÖ ·ª®ng d·ª•ng ƒë√£ m·ªü m·ªôt l·∫ßn cho t·∫•t c·∫£ c√°c test.")

    @classmethod
    def tearDownClass(cls) -> None:
        """ƒê√≥ng ·ª©ng d·ª•ng sau khi t·∫•t c·∫£ c√°c test ho√†n t·∫•t"""
        if cls.driver:
            cls.driver.quit()
            print("‚úÖ ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng sau khi t·∫•t c·∫£ c√°c test ho√†n t·∫•t.")

    def setUp(self) -> None:
        """Reset ·ª©ng d·ª•ng tr∆∞·ªõc m·ªói test b·∫±ng c√°ch ƒë√≥ng v√† m·ªü l·∫°i"""
        self.driver.terminate_app('com.example.app_music')
        self.driver.activate_app('com.example.app_music')
        print("‚úÖ ƒê√£ reset ·ª©ng d·ª•ng tr∆∞·ªõc test (ƒë√≥ng v√† m·ªü l·∫°i).")

    def test_1_failed_login(self) -> None:
        """Test ƒëƒÉng nh·∫≠p th·∫•t b·∫°i v·ªõi th√¥ng tin kh√¥ng h·ª£p l·ªá"""
        # Ki·ªÉm tra xem c√≥ ƒëang ·ªü LoginScreen kh√¥ng
        try:
            self.wait.until(EC.presence_of_element_located(
                (AppiumBy.ACCESSIBILITY_ID, "login_button")
            ))
            print("‚úÖ ƒê√£ ·ªü LoginScreen, s·∫µn s√†ng cho test ƒëƒÉng nh·∫≠p th·∫•t b·∫°i.")
        except TimeoutException:
            print("‚ùå Kh√¥ng ·ªü LoginScreen, ki·ªÉm tra tr·∫°ng th√°i ·ª©ng d·ª•ng.")
            print("üîç Ki·ªÉm tra giao di·ªán hi·ªán t·∫°i:")
            elements = self.driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.TextView")
            for element in elements:
                text = element.text or "Kh√¥ng c√≥ text"
                content_desc = element.get_attribute('content-desc') or "Kh√¥ng c√≥ content-desc"
                print(f"Text: '{text}', Content-desc: '{content_desc}'")
            raise

        email_field = self.wait.until(EC.presence_of_element_located(
            (AppiumBy.XPATH, '//android.widget.EditText[1]')
        ))
        email_field.clear()
        email_field.send_keys("wrong@example.com")
        email_value = email_field.text
        print(f"‚úÖ ƒê√£ nh·∫≠p email kh√¥ng h·ª£p l·ªá: '{email_value}'")

        password_field = self.wait.until(EC.presence_of_element_located(
            (AppiumBy.XPATH, '//android.widget.EditText[2]')
        ))
        password_field.clear()
        password_field.send_keys("wrongpassword")
        password_value = password_field.text
        print(f"‚úÖ ƒê√£ nh·∫≠p m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá: '{password_value}'")

        login_button = self.wait.until(EC.element_to_be_clickable(
            (AppiumBy.ACCESSIBILITY_ID, "login_button")
        ))
        login_button.click()
        print("‚úÖ ƒê√£ nh·∫•n n√∫t Login t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))

        # Ki·ªÉm tra th√¥ng b√°o l·ªói
        try:
            error_message = self.wait.until(EC.presence_of_element_located(
                (AppiumBy.ACCESSIBILITY_ID, "error_message")
            ))
            error_text = error_message.text or "Kh√¥ng c√≥ text hi·ªÉn th·ªã"
            print(f"‚úÖ Th√¥ng b√°o l·ªói: '{error_text}' t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))
            self.assertTrue(error_message.is_displayed(), "Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o l·ªói!")
            self.assertIn(error_text, ["Email not found", "Invalid password", "Please enter email and password", "Login failed"], "Th√¥ng b√°o l·ªói kh√¥ng ƒë√∫ng!")
            print("‚úÖ ƒêƒÉng nh·∫≠p th·∫•t b·∫°i nh∆∞ k·ª≥ v·ªçng, th√¥ng b√°o l·ªói hi·ªÉn th·ªã!")
        except TimeoutException:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng b√°o l·ªói t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))
            print("üîç Ki·ªÉm tra giao di·ªán hi·ªán t·∫°i:")
            elements = self.driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.TextView")
            for element in elements:
                text = element.text or "Kh√¥ng c√≥ text"
                content_desc = element.get_attribute('content-desc') or "Kh√¥ng c√≥ content-desc"
                print(f"Text: '{text}', Content-desc: '{content_desc}'")
            raise

    def test_2_successful_login(self) -> None:
        """Test ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi th√¥ng tin h·ª£p l·ªá"""
        # Ki·ªÉm tra xem c√≥ ƒëang ·ªü LoginScreen kh√¥ng
        try:
            self.wait.until(EC.presence_of_element_located(
                (AppiumBy.ACCESSIBILITY_ID, "login_button")
            ))
            print("‚úÖ ƒê√£ ·ªü LoginScreen, s·∫µn s√†ng cho test ƒëƒÉng nh·∫≠p th√†nh c√¥ng.")
        except TimeoutException:
            print("‚ùå Kh√¥ng ·ªü LoginScreen, ki·ªÉm tra tr·∫°ng th√°i ·ª©ng d·ª•ng.")
            print("üîç Ki·ªÉm tra giao di·ªán hi·ªán t·∫°i:")
            elements = self.driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.TextView")
            for element in elements:
                text = element.text or "Kh√¥ng c√≥ text"
                content_desc = element.get_attribute('content-desc') or "Kh√¥ng c√≥ content-desc"
                print(f"Text: '{text}', Content-desc: '{content_desc}'")
            raise

        # Ki·ªÉm tra kh√¥ng c√≥ th√¥ng b√°o l·ªói tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p
        short_wait = WebDriverWait(self.driver, 3)
        try:
            short_wait.until(EC.presence_of_element_located(
                (AppiumBy.ACCESSIBILITY_ID, "error_message")
            ))
            print("‚ùå C√≥ th√¥ng b√°o l·ªói tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p, tr·∫°ng th√°i giao di·ªán kh√¥ng ƒë√∫ng!")
            raise AssertionError("C√≥ th√¥ng b√°o l·ªói tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!")
        except TimeoutException:
            print("‚úÖ Kh√¥ng c√≥ th√¥ng b√°o l·ªói tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p, tr·∫°ng th√°i giao di·ªán ƒë√∫ng.")

        email_field = self.wait.until(EC.presence_of_element_located(
            (AppiumBy.XPATH, '//android.widget.EditText[1]')
        ))
        email_field.clear()
        email_field.send_keys("thuong@gmail.com")
        email_value = email_field.text
        print(f"‚úÖ ƒê√£ nh·∫≠p email: '{email_value}'")

        password_field = self.wait.until(EC.presence_of_element_located(
            (AppiumBy.XPATH, '//android.widget.EditText[2]')
        ))
        password_field.clear()
        password_field.send_keys("123456")
        password_value = password_field.text
        print(f"‚úÖ ƒê√£ nh·∫≠p m·∫≠t kh·∫©u: '{password_value}'")

        login_button = self.wait.until(EC.element_to_be_clickable(
            (AppiumBy.ACCESSIBILITY_ID, "login_button")
        ))
        login_button.click()
        print("‚úÖ ƒê√£ nh·∫•n n√∫t Login t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))

        # Ki·ªÉm tra ƒë√£ chuy·ªÉn h∆∞·ªõng sang MainScreen
        try:
            self.wait.until(EC.presence_of_element_located(
                (AppiumBy.ACCESSIBILITY_ID, "Hi, Thuong")
            ))
            print("‚úÖ ƒê√£ chuy·ªÉn h∆∞·ªõng sang MainScreen t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))
            print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ k·ª≥ v·ªçng!")
        except TimeoutException:
            print("‚ùå Kh√¥ng chuy·ªÉn h∆∞·ªõng sang MainScreen t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))
            # N·∫øu kh√¥ng chuy·ªÉn h∆∞·ªõng, ki·ªÉm tra xem c√≥ th√¥ng b√°o l·ªói kh√¥ng
            try:
                short_wait = WebDriverWait(self.driver, 5)
                error_message = short_wait.until(EC.presence_of_element_located(
                    (AppiumBy.ACCESSIBILITY_ID, "error_message")
                ))
                error_text = error_message.text or "Kh√¥ng c√≥ text hi·ªÉn th·ªã"
                print(f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, th√¥ng b√°o l·ªói xu·∫•t hi·ªán t·∫°i th·ªùi ƒëi·ªÉm: {time.strftime('%H:%M:%S')}")
                print(f"Th√¥ng b√°o l·ªói: '{error_text}'")
                print("üîç Ki·ªÉm tra giao di·ªán hi·ªán t·∫°i:")
                elements = self.driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.TextView")
                for element in elements:
                    text = element.text or "Kh√¥ng c√≥ text"
                    content_desc = element.get_attribute('content-desc') or "Kh√¥ng c√≥ content-desc"
                    print(f"Text: '{text}', Content-desc: '{content_desc}'")
                self.fail("L·ªói: ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, th√¥ng b√°o l·ªói xu·∫•t hi·ªán!")
            except TimeoutException:
                print("‚ùå Kh√¥ng c√≥ th√¥ng b√°o l·ªói t·∫°i th·ªùi ƒëi·ªÉm: ", time.strftime("%H:%M:%S"))
                print("üîç Ki·ªÉm tra giao di·ªán hi·ªán t·∫°i:")
                elements = self.driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.TextView")
                for element in elements:
                    text = element.text or "Kh√¥ng c√≥ text"
                    content_desc = element.get_attribute('content-desc') or "Kh√¥ng c√≥ content-desc"
                    print(f"Text: '{text}', Content-desc: '{content_desc}'")
                self.fail("L·ªói: Kh√¥ng chuy·ªÉn h∆∞·ªõng sang MainScreen v√† c≈©ng kh√¥ng c√≥ th√¥ng b√°o l·ªói!")

if __name__ == '__main__':
    unittest.main()